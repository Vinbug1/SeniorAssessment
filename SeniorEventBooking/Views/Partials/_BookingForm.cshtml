@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage

<div class="booking-container">
  <h2>Book Your Event</h2>

  <form id="bookingForm" class="booking-form">
      <input type="hidden" name="EventId" value="@Model?.EventId" />
      <input type="hidden" name="BookingDate" value="@DateTime.UtcNow.ToString("yyyy-MM-dd")" />

      <div class="form-group">
          <label>Full Name</label>
          <input type="text" name="FullName" placeholder="Enter your full name" required />
      </div>

      <div class="form-group">
          <label>Email</label>
          <input type="email" name="Email" placeholder="Enter your email address" required />
      </div>

      <div class="form-group">
          <label>Notes</label>
          <textarea name="Note" placeholder="Any special requests"></textarea>
      </div>

      <button type="submit" class="submit-btn">Book Now</button>
  </form>

  <div id="message" class="booking-message"></div>
</div>

<style>
/* Container */
.booking-container {
  max-width: 500px;
  margin: 2rem auto;
  padding: 2rem;
  background-color: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 12px rgba(0,0,0,0.06);
  font-family: "Inter", sans-serif;
}

/* Heading */
.booking-container h2 {
  text-align: center;
  font-size: 1.8rem;
  margin-bottom: 1.5rem;
  color: #111827;
}

/* Form layout */
.booking-form .form-group {
  margin-bottom: 1.2rem;
}

.booking-form label {
  display: block;
  margin-bottom: 0.4rem;
  font-weight: 600;
  color: #374151;
}

.booking-form input,
.booking-form textarea {
  width: 100%;
  padding: 0.6rem 0.8rem;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  font-size: 1rem;
  color: #111827;
  transition: border-color 0.2s, box-shadow 0.2s;
}

.booking-form input:focus,
.booking-form textarea:focus {
  outline: none;
  border-color: #2563eb;
  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.2);
}

/* Textarea resize */
.booking-form textarea {
  min-height: 80px;
  resize: vertical;
}

/* Submit button */
.submit-btn {
  display: inline-block;
  width: 100%;
  background-color: #2563eb;
  color: #fff;
  border: none;
  padding: 0.8rem;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.2s, transform 0.1s;
}

.submit-btn:hover {
  background-color: #1d4ed8;
  transform: translateY(-1px);
}

.submit-btn:active {
  transform: translateY(0);
}

/* Message */
.booking-message {
  margin-top: 1rem;
  text-align: center;
  font-weight: 500;
  font-size: 0.95rem;
}
</style>

<script>
const API_BASE = "@apiBase";
const API_KEY = "@apiKey";

const CONTACTS_URL = `${API_BASE}/contacts`;
const BOOKINGS_URL = `${API_BASE}/bookings`;

const form = document.getElementById("bookingForm");
const message = document.getElementById("message");

form.addEventListener("submit", async (e) => {
    e.preventDefault();
    message.textContent = "⏳ Checking contact...";
    message.style.color = "#555";

    const data = Object.fromEntries(new FormData(form));
    const { FullName, Email, Note, BookingDate, EventId } = data;

    try {
        //  Check if contact exists
        let contact = null;
        const contactRes = await fetch(`${CONTACTS_URL}/${contactId}`, {
            headers: { "Authorization": `Bearer ${API_KEY}` }
        });
        if (contactRes.ok) {
            const contacts = await contactRes.json();
            if (contacts.length > 0) contact = contacts[0];
        }

        // If not, create a new one
        if (!contact) {
            message.textContent = "🆕 Creating new contact...";
            const newContact = {
                fullName: FullName,
                emailAddress: Email,
                description: "Auto-created from booking form"
            };
            const createRes = await fetch(CONTACTS_URL, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${API_KEY}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(newContact)
            });
            contact = await createRes.json();
        }

        //  Create booking
        message.textContent = "📅 Creating booking...";
        const booking = {
            customerType: "member",
            customerId: contact.id,
            eventId: EventId,
            note: Note,
            bookingDate: BookingDate
        };
        const bookRes = await fetch(BOOKINGS_URL, {
            method: "POST",
            headers: {
                "Authorization": `Bearer ${API_KEY}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify(booking)
        });

        if (!bookRes.ok) throw new Error("Failed to create booking");

        message.textContent = "✅ Booking created successfully!";
        message.style.color = "green";
        form.reset();

    } catch (err) {
        console.error(err);
        message.textContent = "❌ Error: " + err.message;
        message.style.color = "red";
    }
});
</script>


@* <script>
const API_BASE = "https://adassoc.memberbase-test.com/api/v1";
const CONTACTS_URL = `${API_BASE}/contacts`;
const DATASET_NAME = "eventBookings"; // Replace with your dataset name
const BOOKINGS_URL = `${API_BASE}/datasets/${DATASET_NAME}/data`;
const API_KEY = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiNWJmMmExZTRjNDMzNWY5ZGY3ZjE2YmZkY2JlNGE4OWU0ZGUwNzMwYTQ2OWMyYmEzODZmODMyYWE0M2I3MDIzYWNkMzE5NzhiNzNiZjc4MzYiLCJpYXQiOjE3NjEzNzY0NzkuNDI3MjAzLCJuYmYiOjE3NjEzNzY0NzkuNDI3MjA2LCJleHAiOjE5MTkxNDI4NzkuNDEzMTM1LCJzdWIiOiIiLCJzY29wZXMiOlsiKiJdfQ.CrsmfKta_xznCQqizkfckm31Fa_5WNGbz_xr7SMks5MHPrWYSKyIbikvIZcsUZnlMLh9fL3GdDlrstybDJqUrjnVdUS8itjHAph_Zp5ZCrB10vi9NTUfBzb51p5-Qc64ZvQrjmo7agZ2dNRy_sbHqSDckntVHu9NsnFcTjXzB50ad2kPv5WPUdYLITEG0jbst61XOrsS5mOeb5HxAnk4wGMRkV8e8rPTb5If_tvjVu1RdN-O1EBa47UMJ927XXUMrMxnGVEMcD_ITr0HoSKxrDBucphe6tG_uIpyEiHNjZcj-on9Tf91583wHj612qD4mr3c7QAA0KRDbMsHkypttGyDpnhsi4gQfVVACnrlI1mTD67pWAhVcde59i1qJ7XFSPObbXPLf1E1mYO1cY4Rj966h_XcNv1AtGezG_kKbOw9yCluaI5_5Putd402-bl-cHRzFCZo6V46mXVpwQHGj_qxk0zn0uNEX4Zapmf6_DnxqoGtPHfsyfMCci8z0lEJR7v0aB0yOqot3WIwTb9QF3rzsC279DAAgQrxvkmAIDAtFRs0uqiwckPODtI1h-nJt9oIz3v8FDB4EDIc8qJuFuNEPjDpcn9Lvp_IMKA3TtyyBRERmMzm9roeVxGKxh2drMU9yJ8X5w-h8A7lrIlNGxEPMJVwoNMny-HWUNV6HA8"; // Replace with your key

@* const form = document.getElementById("bookingForm");
const message = document.getElementById("message");

form.addEventListener("submit", async (e) => {
  e.preventDefault();
  message.textContent = "⏳ Checking contact...";
  message.style.color = "#555";

  const data = Object.fromEntries(new FormData(form));
  const { FullName, Email, Note, BookingDate, EventId } = data;

  try {
    // 1️⃣ Check if contact exists
    let contact = null;
    const contactRes = await fetch(`${API_BASE}/members?email=${Email}`, {
      headers: { "Authorization": `Bearer ${API_KEY}` }
    });
    if (contactRes.ok) {
      const contacts = await contactRes.json();
      if (contacts.length > 0) contact = contacts[0];
    }

    // 2️⃣ If not, create a new one
    if (!contact) {
      message.textContent = "🆕 Creating new contact...";
      const newContact = {
        fullName: FullName,
        emailAddress: Email,
        description: "Auto-created from booking form"
      };
      const createRes = await fetch(`${API_BASE}/members`, {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${API_KEY}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(newContact)
      });
      contact = await createRes.json();
    }

    // 3️⃣ Create booking
    message.textContent = "📅 Creating booking...";
    const booking = {
      customerType: "member",
      customerId: contact.id,
      eventId: EventId,
      note: Note,
      bookingDate: BookingDate
    };
    const bookRes = await fetch(`${API_BASE}/bookings`, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(booking)
    });

    if (!bookRes.ok) throw new Error("Failed to create booking");

    message.textContent = "✅ Booking created successfully!";
    message.style.color = "green";
    form.reset();

  } catch (err) {
    console.error(err);
    message.textContent = "❌ Error: " + err.message;
    message.style.color = "red";
  }
});
</script> *@

